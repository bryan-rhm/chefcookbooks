---
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.10.0/24


#####SUBNETS#####
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.168.10.0/27
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.168.10.32/27
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.168.10.64/27
      AvailabilityZone:
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.168.10.96/27
      AvailabilityZone:
        Fn::Select: 
          - 3
          - Fn::GetAZs: ""

#####INTERNET GATEWAY#####
  InternetGateway:
    Type: AWS::EC2::InternetGateway

####INTERNET GATEWAY ATTACHMENT####
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - MyVPC
      - InternetGateway
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC

#####ELASTIC IP######
  ElasticIp:
    Type: AWS::EC2::EIP

#####NAT GATEWAY#####
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: 
      - ElasticIp
      - PublicSubnet1
    Properties: 
      AllocationId: !GetAtt ElasticIp.AllocationId
      SubnetId: !Ref PublicSubnet1

####ROUTE TABLES####
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

####ROUTES####
  RouteInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: 
      - InternetGateway
      - RouteTablePublic
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  RouteNatGateway:
    Type: AWS::EC2::Route
    DependsOn: 
      - NatGateway
      - RouteTablePrivate
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

####SUBNETS->ROUTETABLE ASSOCIATIONS####
  PublicSubnet1RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - RouteTablePublic
      - PublicSubnet1
    Properties:
      RouteTableId : !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePublic
      - PublicSubnet2
    Properties:
      RouteTableId : !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet2
  PrivateSubnet1RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - RouteTablePrivate
      - PrivateSubnet1
    Properties:
      RouteTableId : !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePrivate
      - PrivateSubnet2
    Properties:
      RouteTableId : !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnet2

####ACLs####
  NetworkAclPublic:
    Type: AWS::EC2::NetworkAcl
    DependsOn: MyVPC
    Properties:
      VpcId: !Ref MyVPC
  NetworkAclPrivate:
    Type: AWS::EC2::NetworkAcl
    DependsOn: MyVPC
    Properties:
      VpcId: !Ref MyVPC

####NETWORK ACL ENTRIES####
  AclEntryIngressAllPublic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      RuleNumber: '1'
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref NetworkAclPublic
      PortRange:
        From: -1
        To: -1
  AclEntryEgressAllPublic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      RuleNumber: '1'
      Egress: true
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref NetworkAclPublic
      PortRange:
        From: -1
        To: -1
  AclEntryIngressAllPrivate:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPrivate
    Properties:
      RuleNumber: '1'
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref NetworkAclPrivate
      PortRange:
        From: -1
        To: -1
  AclEntryEgressAllPrivate:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPrivate
    Properties:
      RuleNumber: '1'
      Egress: true
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref NetworkAclPrivate
      PortRange:
        From: -1
        To: -1

#####EC2 Security Groups####
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable port 80 Http
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0
        - IpProtocol: TCP
          FromPort: 26379
          ToPort: 26379
          CidrIp: 0.0.0.0/0
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: TCP
          ToPort: 22
      VpcId: !Ref MyVPC

####OUTPUTS####
Outputs:
  RedisSecurityGroupId:
    Description: Id of the server security Group
    Value: !Ref RedisSecurityGroup
    Export:
      Name: RedisSecurityGroupId
  PublicSubnet1:
    Description: Public Subnet Id
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1
  VpcId:
    Description: Id of the Vpc
    Value: !Ref MyVPC
    Export:
      Name: VpcId
  